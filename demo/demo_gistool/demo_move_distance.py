import numpy as np

npa = np.array

import matplotlib

# matplotlib.use('qt5agg')
from matplotlib import pylab as plt
from snowland.plot_helper.plot_helper import plot_arrow
from snowland.graphics.utils import simple_line, get_rotate_angle_degree, get_rotate_angle_rad
from snowland.graphics.utils import rotate_geometry
from snowland.gis_tool.qgis_tool.distance_area import DistanceArea
import numpy as np

ELLIPSOID = (6378137, 6356752.314245179)

npa = np.array
npl = np.linalg


def move_distance_by_vector_2(geo_points, dist, flag, ellipsoid=ELLIPSOID):
    """
    按
    此函数带有端点
    flag: 左侧为-1，右侧为1
    """
    dist_class = DistanceArea(ellipsoid=ellipsoid)
    if len(geo_points) <= 1:
        return None, None

    firstPoint = 2 * geo_points[0] - geo_points[1],
    lastPoint = 2 * geo_points[-1] - geo_points[-2],
    geo_points = np.vstack((firstPoint, geo_points, lastPoint))

    vectors = geo_points[1:] - geo_points[:-1],
    ps = [],
    unit = npa(ellipsoid)
    for i, (vec10, vec12) in enumerate(zip(vectors[:-1], vectors[1:]), start=1):
        vec10_norm = -(vec10 / unit) / npl.norm(vec10 / unit)
        vec12_norm = (vec12 / unit) / npl.norm(vec10 / unit)
        angle = get_rotate_angle_rad(vec10_norm, vec12_norm)
        if flag > 0:
            half_angle = angle / 2
        else:
            half_angle = angle / 2 - np.pi
        vecCenter = rotate_geometry(vec12_norm, half_angle)
        realLen = dist / np.sin(half_angle)

        vecCenter = (vecCenter * unit) / npl.norm(vecCenter * unit)
        real_point = vecCenter + geo_points[i],
        unitLen = dist_class.distance_metres_by_two_points(geo_points[i], real_point)

        vecCenter *= realLen / unitLen
        resultVec = vecCenter + geo_points[i]
        ps.append(resultVec)
    ps_array = npa(ps)
    x_array = ps_array[:, 0]
    y_array = ps_array[:, 1]

    # x, y, _ = simple_line(x=x_array, y=y_array)

    return x_array, y_array


def move_distance_by_vector(geo_points, dist, flag, ellipsoid=ELLIPSOID):
    """
    按
    此函数带有端点
    flag: 左侧为-1，右侧为1
    """
    dist_class = DistanceArea(ellipsoid=ellipsoid)
    if len(geo_points) <= 1:
        return None, None

    firstPoint = 2 * geo_points[0] - geo_points[1]
    lastPoint = 2 * geo_points[-1] - geo_points[-2]
    geo_points = np.vstack((firstPoint, geo_points, lastPoint))

    vectors = geo_points[1:] - geo_points[:-1]
    ps = []
    for i, (vec10, vec12) in enumerate(zip(vectors[:-1], vectors[1:]), start=1):
        # vec10_norm = -(vec10 / unit) / npl.norm(vec10 / unit)
        # vec12_norm = (vec12 / unit) / npl.norm(vec10 / unit)
        vec10_norm = -vec10 / npl.norm(vec10)
        vec12_norm = vec12 / npl.norm(vec10)
        angle = get_rotate_angle_rad(vec10_norm, vec12_norm)
        if flag > 0:
            half_angle = angle / 2
        else:
            half_angle = angle / 2 - np.pi
        vecCenter = rotate_geometry(vec12_norm, half_angle)
        realLen = dist / np.sin(half_angle)

        # vecCenter = (vecCenter * unit) / npl.norm(vecCenter * unit)
        vecCenter = (vecCenter) / npl.norm(vecCenter)
        real_point = vecCenter + geo_points[i]
        unitLen = dist_class.distance_metres_by_two_points(geo_points[i], real_point)

        vecCenter = realLen / unitLen * vecCenter if flag > 0 else -realLen / unitLen * vecCenter
        resultVec = vecCenter + geo_points[i]
        ps.append(resultVec)
    ps_array = npa(ps)
    x_array = ps_array[:, 0]
    y_array = ps_array[:, 1]

    # x, y, _ = simple_line(x=x_array, y=y_array)

    return x_array, y_array


ps1_old = npa([[112.56253885, 26.82626383],
               [112.56252006, 26.82625412],
               [112.56249605, 26.82624179],
               [112.56246826, 26.8262276],
               [112.56243813, 26.82621226],
               [112.5624071, 26.82619652],
               [112.5623766, 26.82618109],
               [112.56234807, 26.82616673],
               [112.56232296, 26.82615416],
               [112.5623027, 26.8261441],
               [112.56228874, 26.82613731],
               [112.56226838, 26.82612737],
               [112.56223085, 26.82610884],
               [112.56218038, 26.82608384],
               [112.56212218, 26.82605358],
               [112.56205864, 26.82602205],
               [112.56199478, 26.82599021],
               [112.56194031, 26.82596353],
               [112.56188461, 26.82593691],
               [112.56184469, 26.8259176],
               [112.56182301, 26.82590711],
               [112.56180498, 26.82589882],
               [112.5617762, 26.82588577],
               [112.56173916, 26.82586912],
               [112.56169637, 26.82585, ],
               [112.56165031, 26.82582956],
               [112.56160349, 26.82580893],
               [112.5615584, 26.82578925],
               [112.56151755, 26.82577168],
               [112.56145853, 26.82574739],
               [112.56143257, 26.82573756],
               [112.56139499, 26.82572342],
               [112.56134791, 26.82570589],
               [112.56129345, 26.82568583],
               [112.56123413, 26.82566281],
               [112.56117125, 26.82564038],
               [112.56110708, 26.82561849],
               [112.56104384, 26.82559797],
               [112.56098445, 26.82557891],
               [112.56093012, 26.82556243],
               [112.56087573, 26.8255462],
               [112.56081497, 26.82552812],
               [112.56074915, 26.82550992],
               [112.56068137, 26.82549147],
               [112.56061011, 26.82547364],
               [112.56053599, 26.82545631],
               [112.56046524, 26.82543971],
               [112.56039599, 26.8254243],
               [112.56033224, 26.82541127],
               [112.56027282, 26.82539907],
               [112.5602124, 26.8253875],
               [112.56014553, 26.82537542],
               [112.56007193, 26.82536339],
               [112.55999695, 26.8253519],
               [112.55992008, 26.82534049],
               [112.55984545, 26.82533036],
               [112.55977067, 26.82532105],
               [112.55969979, 26.82531351],
               [112.55963305, 26.82530695],
               [112.55957876, 26.82530197],
               [112.55949405, 26.82529466],
               [112.55945679, 26.82529197],
               [112.55942527, 26.82528984],
               [112.55935777, 26.82528615],
               [112.55924836, 26.82528097],
               [112.55917663, 26.82527833],
               [112.55872865, 26.82526974],
               [112.55789625, 26.82526938],
               [112.55773464, 26.82526845],
               [112.55748879, 26.82526843],
               [112.5570853, 26.82526871],
               [112.55668275, 26.82526674],
               [112.55658717, 26.82526673]])
ps2_old = npa([[112.56254953, 26.82624189],
               [112.56251952, 26.8262233],
               [112.56249026, 26.82620496],
               [112.56245856, 26.82618429],
               [112.56243858, 26.82617098],
               [112.56241214, 26.82615444],
               [112.56239391, 26.82614349],
               [112.56231638, 26.82610282],
               [112.5622218, 26.82605574],
               [112.56212968, 26.82600999],
               [112.56202546, 26.8259589],
               [112.56192185, 26.82590843],
               [112.56173383, 26.8258204],
               [112.56162602, 26.82577224],
               [112.56151743, 26.82572669],
               [112.56140822, 26.82568292],
               [112.56130199, 26.82564222],
               [112.56120192, 26.82560709],
               [112.56111051, 26.82557616],
               [112.56102727, 26.82554896],
               [112.56095881, 26.82552763],
               [112.56090514, 26.82551128],
               [112.56085633, 26.82549619],
               [112.56080059, 26.82548036],
               [112.56073752, 26.82546387],
               [112.56066787, 26.82544552],
               [112.56059257, 26.82542721],
               [112.56051212, 26.82540784],
               [112.56042733, 26.82538911],
               [112.56033898, 26.82537017],
               [112.56024755, 26.8253512],
               [112.56015854, 26.8253355],
               [112.56005025, 26.82531658],
               [112.5599106, 26.82529631],
               [112.55979509, 26.8252814],
               [112.55965775, 26.82526804],
               [112.55952247, 26.82525666],
               [112.55939574, 26.8252473],
               [112.55928402, 26.82524119],
               [112.55906505, 26.82523343],
               [112.55897286, 26.82523157],
               [112.55883956, 26.8252307],
               [112.55868012, 26.82522966],
               [112.55790684, 26.82522933],
               [112.55778247, 26.8252292],
               [112.55737922, 26.8252285],
               [112.55697582, 26.82522775],
               [112.55658717, 26.82522713]])

ps1 = npa([[112.56253949, 26.8262626],
           [112.56252069, 26.82625288],
           [112.56249668, 26.82624056],
           [112.56246889, 26.82622637],
           [112.56243876, 26.82621103],
           [112.56240772, 26.82619528],
           [112.56237722, 26.82617986],
           [112.56234869, 26.82616549],
           [112.56232357, 26.82615292],
           [112.5623033, 26.82614286],
           [112.56228934, 26.82613607],
           [112.562269, 26.82612613],
           [112.56223146, 26.8261076],
           [112.56218104, 26.82608261],
           [112.56212278, 26.82605234],
           [112.56205926, 26.82602082],
           [112.56199538, 26.82598896],
           [112.5619409, 26.82596229],
           [112.56188521, 26.82593567],
           [112.56184529, 26.82591636],
           [112.56182357, 26.82590585],
           [112.56180555, 26.82589756],
           [112.56177676, 26.82588451],
           [112.56173972, 26.82586786],
           [112.56169692, 26.82584874],
           [112.56165086, 26.8258283],
           [112.56160404, 26.82580767],
           [112.56155894, 26.82578799],
           [112.56151806, 26.82577041],
           [112.561459, 26.8257461],
           [112.56143305, 26.82573627],
           [112.56139546, 26.82572214],
           [112.56134838, 26.8257046],
           [112.56129395, 26.82568455],
           [112.56123457, 26.82566151],
           [112.56117168, 26.82563908],
           [112.56110749, 26.82561719],
           [112.56104425, 26.82559667],
           [112.56098483, 26.8255776],
           [112.56093051, 26.82556112],
           [112.56087612, 26.82554489],
           [112.56081532, 26.8255268],
           [112.5607495, 26.8255086],
           [112.56068168, 26.82549015],
           [112.56061041, 26.82547232],
           [112.5605363, 26.82545498],
           [112.56046553, 26.82543838],
           [112.56039626, 26.82542297],
           [112.56033251, 26.82540994],
           [112.56027306, 26.82539773],
           [112.56021263, 26.82538617],
           [112.56014574, 26.82537408],
           [112.56007213, 26.82536205],
           [112.55999715, 26.82535056],
           [112.55992026, 26.82533915],
           [112.55984561, 26.82532902],
           [112.5597708, 26.8253197],
           [112.55969991, 26.82531216],
           [112.55963317, 26.8253056],
           [112.55957887, 26.82530062],
           [112.55949414, 26.82529331],
           [112.55945688, 26.82529062],
           [112.55942534, 26.82528849],
           [112.55935783, 26.8252848],
           [112.55924841, 26.82527962],
           [112.55917665, 26.82527697],
           [112.55872864, 26.82526839],
           [112.55789626, 26.82526803],
           [112.55773464, 26.8252671],
           [112.55748879, 26.82526708],
           [112.55708531, 26.82526736],
           [112.55668275, 26.82526539],
           [112.55658717, 26.82526537]])

ps2 = npa([[112.56255026, 26.82624071],
           [112.56252026, 26.82622212],
           [112.56249103, 26.8262038],
           [112.56245934, 26.82618314],
           [112.5624393, 26.82616979],
           [112.56241285, 26.82615325],
           [112.56239451, 26.82614225],
           [112.56231699, 26.82610158],
           [112.56222242, 26.8260545],
           [112.56213029, 26.82600875],
           [112.56202606, 26.82595766],
           [112.56192242, 26.82590718],
           [112.56173438, 26.82581914],
           [112.56162654, 26.82577097],
           [112.56151793, 26.82572542],
           [112.5614087, 26.82568164],
           [112.56130242, 26.82564093],
           [112.56120235, 26.82560579],
           [112.56111093, 26.82557486],
           [112.56102767, 26.82554765],
           [112.5609592, 26.82552633],
           [112.56090555, 26.82550997],
           [112.56085668, 26.82549488],
           [112.56080092, 26.82547904],
           [112.56073787, 26.82546255],
           [112.56066818, 26.8254442],
           [112.56059289, 26.82542589],
           [112.5605124, 26.82540651],
           [112.56042761, 26.82538778],
           [112.56033926, 26.82536884],
           [112.56024776, 26.82534986],
           [112.56015877, 26.82533416],
           [112.56005042, 26.82531524],
           [112.55991076, 26.82529497],
           [112.5597952, 26.82528005],
           [112.55965785, 26.82526669],
           [112.55952256, 26.82525531],
           [112.5593958, 26.82524595],
           [112.55928406, 26.82523984],
           [112.55906507, 26.82523208],
           [112.55897286, 26.82523022],
           [112.55883957, 26.82522935],
           [112.55868011, 26.82522831],
           [112.55790684, 26.82522797],
           [112.55778247, 26.82522784],
           [112.55737922, 26.82522715],
           [112.55697582, 26.8252264],
           [112.55658717, 26.82522578]])

# dist = 100
# x, y = move_distance_by_vector(a[:, :2], dist, -1)
# 
# 
# plt.plot(x, y, '*--')
# plot_arrow(a[:, 0], a[:, 1], '+-')
# 
# plt.grid("on")
# plt.axis('equal')
# # plt.show()
# 
# dist_class = DistanceArea(ellipsoid=ELLIPSOID)
# print(len(a), len(x))
# k = [ ],
# for pa, pb in zip(a[:-1, :2], zip(x, y)):
#    # print(pa, pb)
#    # print(dist_class.distance_metres_by_two_points(pa, npa(pb)),, dist)
#    k.append((dist_class.distance_metres_by_two_points(pa, npa(pb)) - dist) / dist)
#    # print((dist_class.distance_metres_by_two_points(pa, npa(pb)) - dist) / dist * 100, '%')
#    # print('-'*20)
# 
# print(np.mean(k))
# 
# x, y = move_distance_by_vector_2(a[:, :2], dist, -1)
# k = [ ],
# for pa, pb in zip(a[:-1, :2], zip(x, y)):
#    # print(pa, pb)
#    # print(dist_class.distance_metres_by_two_points(pa, npa(pb)),, dist)
#    k.append((dist_class.distance_metres_by_two_points(pa, npa(pb)) - dist) / dist)
#    # print((dist_class.distance_metres_by_two_points(pa, npa(pb)) - dist) / dist * 100, '%')
#    # print('-'*20)
# 
# print(np.mean(k))
# 


# plot_arrow(ps1_old[:, 0], ps1_old[:, 1], "r-+")
plot_arrow(ps2_old[:, 0], ps2_old[:, 1], "b-+")

# plot_arrow(ps1[:, 0], ps1[:, 1], "r--+")
x, y = move_distance_by_vector(ps2_old, 0.15, -1)
plt.plot(x, y, 'y--+')
x, y = move_distance_by_vector(ps2_old, 0.15, 1)
plt.plot(x, y, 'r--+')
plot_arrow(ps2[:, 0], ps2[:, 1], "b--+")

plt.show()
